{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"license/","text":"The MIT License (MIT) \u00b6 Copyright \u00a9 2024 Nick Stockton Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#the-mit-license-mit","text":"Copyright \u00a9 2024 Nick Stockton Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"},{"location":"api/","text":"Knickknacks API \u00b6 Automatically generated API reference. Knickknacks \u00b6 Iterables Numbers Platforms Strings Testing Utils","title":"API Index"},{"location":"api/#knickknacks-api","text":"Automatically generated API reference.","title":"Knickknacks API"},{"location":"api/#knickknacks","text":"Iterables Numbers Platforms Strings Testing Utils","title":"Knickknacks"},{"location":"api/iterables/","text":"Module knickknacks.iterables \u00b6 Stuff to do with iterables. Function average ( items ) \u00b6 Calculates the average item length of an iterable. Parameters: Name Type Description Default items Iterable[float] The iterable of items. required Returns: Type Description float The average item length. Source code in knickknacks/iterables.py def average ( items : Iterable [ float ]) -> float : \"\"\" Calculates the average item length of an iterable. Args: items: The iterable of items. Returns: The average item length. \"\"\" try : return statistics . mean ( items ) except statistics . StatisticsError : # No items. return 0 Function human_sort ( lst ) \u00b6 Sorts a list of strings, with numbers sorted according to their numeric value. Parameters: Name Type Description Default lst Sequence[str] The list of strings to be sorted. required Returns: Type Description list[str] The items of the list, with strings containing numbers sorted according to their numeric value. Source code in knickknacks/iterables.py def human_sort ( lst : Sequence [ str ]) -> list [ str ]: \"\"\" Sorts a list of strings, with numbers sorted according to their numeric value. Args: lst: The list of strings to be sorted. Returns: The items of the list, with strings containing numbers sorted according to their numeric value. \"\"\" return sorted ( lst , key = lambda item : [ int ( text ) if text . isdigit () else text for text in re . split ( r \"(\\d+)\" , item , flags = re . UNICODE ) ], ) Function lpad_list ( lst , padding , count , * , fixed = False ) \u00b6 Pad the left side of a list. Parameters: Name Type Description Default lst Sequence[Any] The list to be padded. required padding Any The item to use for padding. required count int The minimum size of the returned list. required fixed bool True if the maximum size of the returned list should be restricted to count, False otherwise. False Returns: Type Description list[Any] A padded copy of the list. Source code in knickknacks/iterables.py def lpad_list ( lst : Sequence [ Any ], padding : Any , count : int , * , fixed : bool = False ) -> list [ Any ]: \"\"\" Pad the left side of a list. Args: lst: The list to be padded. padding: The item to use for padding. count: The minimum size of the returned list. fixed: True if the maximum size of the returned list should be restricted to count, False otherwise. Returns: A padded copy of the list. \"\"\" if fixed : return [ * [ padding ] * ( count - len ( lst )), * lst ][: count ] return [ * [ padding ] * ( count - len ( lst )), * lst ] Function pad_list ( lst , padding , count , * , fixed = False ) \u00b6 Pad the right side of a list. Parameters: Name Type Description Default lst Sequence[Any] The list to be padded. required padding Any The item to use for padding. required count int The minimum size of the returned list. required fixed bool True if the maximum size of the returned list should be restricted to count, False otherwise. False Returns: Type Description list[Any] A padded copy of the list. Source code in knickknacks/iterables.py def pad_list ( lst : Sequence [ Any ], padding : Any , count : int , * , fixed : bool = False ) -> list [ Any ]: \"\"\" Pad the right side of a list. Args: lst: The list to be padded. padding: The item to use for padding. count: The minimum size of the returned list. fixed: True if the maximum size of the returned list should be restricted to count, False otherwise. Returns: A padded copy of the list. \"\"\" if fixed : return [ * lst , * [ padding ] * ( count - len ( lst ))][: count ] return [ * lst , * [ padding ] * ( count - len ( lst ))]","title":"iterables.py"},{"location":"api/iterables/#knickknacks.iterables","text":"Stuff to do with iterables.","title":"iterables"},{"location":"api/iterables/#knickknacks.iterables.average","text":"Calculates the average item length of an iterable. Parameters: Name Type Description Default items Iterable[float] The iterable of items. required Returns: Type Description float The average item length. Source code in knickknacks/iterables.py def average ( items : Iterable [ float ]) -> float : \"\"\" Calculates the average item length of an iterable. Args: items: The iterable of items. Returns: The average item length. \"\"\" try : return statistics . mean ( items ) except statistics . StatisticsError : # No items. return 0","title":"average()"},{"location":"api/iterables/#knickknacks.iterables.human_sort","text":"Sorts a list of strings, with numbers sorted according to their numeric value. Parameters: Name Type Description Default lst Sequence[str] The list of strings to be sorted. required Returns: Type Description list[str] The items of the list, with strings containing numbers sorted according to their numeric value. Source code in knickknacks/iterables.py def human_sort ( lst : Sequence [ str ]) -> list [ str ]: \"\"\" Sorts a list of strings, with numbers sorted according to their numeric value. Args: lst: The list of strings to be sorted. Returns: The items of the list, with strings containing numbers sorted according to their numeric value. \"\"\" return sorted ( lst , key = lambda item : [ int ( text ) if text . isdigit () else text for text in re . split ( r \"(\\d+)\" , item , flags = re . UNICODE ) ], )","title":"human_sort()"},{"location":"api/iterables/#knickknacks.iterables.lpad_list","text":"Pad the left side of a list. Parameters: Name Type Description Default lst Sequence[Any] The list to be padded. required padding Any The item to use for padding. required count int The minimum size of the returned list. required fixed bool True if the maximum size of the returned list should be restricted to count, False otherwise. False Returns: Type Description list[Any] A padded copy of the list. Source code in knickknacks/iterables.py def lpad_list ( lst : Sequence [ Any ], padding : Any , count : int , * , fixed : bool = False ) -> list [ Any ]: \"\"\" Pad the left side of a list. Args: lst: The list to be padded. padding: The item to use for padding. count: The minimum size of the returned list. fixed: True if the maximum size of the returned list should be restricted to count, False otherwise. Returns: A padded copy of the list. \"\"\" if fixed : return [ * [ padding ] * ( count - len ( lst )), * lst ][: count ] return [ * [ padding ] * ( count - len ( lst )), * lst ]","title":"lpad_list()"},{"location":"api/iterables/#knickknacks.iterables.pad_list","text":"Pad the right side of a list. Parameters: Name Type Description Default lst Sequence[Any] The list to be padded. required padding Any The item to use for padding. required count int The minimum size of the returned list. required fixed bool True if the maximum size of the returned list should be restricted to count, False otherwise. False Returns: Type Description list[Any] A padded copy of the list. Source code in knickknacks/iterables.py def pad_list ( lst : Sequence [ Any ], padding : Any , count : int , * , fixed : bool = False ) -> list [ Any ]: \"\"\" Pad the right side of a list. Args: lst: The list to be padded. padding: The item to use for padding. count: The minimum size of the returned list. fixed: True if the maximum size of the returned list should be restricted to count, False otherwise. Returns: A padded copy of the list. \"\"\" if fixed : return [ * lst , * [ padding ] * ( count - len ( lst ))][: count ] return [ * lst , * [ padding ] * ( count - len ( lst ))]","title":"pad_list()"},{"location":"api/numbers/","text":"Module knickknacks.numbers \u00b6 Stuff to do with numbers. Function clamp ( value , minimum , maximum ) \u00b6 Clamps the given value between the given minimum and maximum values. Parameters: Name Type Description Default value float The value to restrict inside the range defined by minimum and maximum. required minimum float The minimum value to compare against. required maximum float The maximum value to compare against. required Returns: Type Description float The result between minimum and maximum. Source code in knickknacks/numbers.py def clamp ( value : float , minimum : float , maximum : float ) -> float : \"\"\" Clamps the given value between the given minimum and maximum values. Args: value: The value to restrict inside the range defined by minimum and maximum. minimum: The minimum value to compare against. maximum: The maximum value to compare against. Returns: The result between minimum and maximum. \"\"\" # Note the ignore to the linter. # The linter would have me use a combination of min and max functions inside each other. # Using a ternary operator is much more readable, and according to timeit, faster. return minimum if value < minimum else maximum if value > maximum else value # NOQA: FURB136 Function float_to_fraction ( number ) \u00b6 Converts a float to a fraction. Note https://stackoverflow.com/questions/23344185/how-to-convert-a-decimal-number-into-fraction Parameters: Name Type Description Default number float The number to convert. required Returns: Type Description str A string containing the number as a fraction. Source code in knickknacks/numbers.py def float_to_fraction ( number : float ) -> str : \"\"\" Converts a float to a fraction. Note: https://stackoverflow.com/questions/23344185/how-to-convert-a-decimal-number-into-fraction Args: number: The number to convert. Returns: A string containing the number as a fraction. \"\"\" return str ( fractions . Fraction ( number ) . limit_denominator ()) Function round_half_away_from_zero ( number , decimals = 0 ) \u00b6 Rounds a float away from 0 if the fractional is 5 or more. Note https://realpython.com/python-rounding Parameters: Name Type Description Default number float The number to round. required decimals int The number of fractional decimal places to round to. 0 Returns: Type Description float The number after rounding. Source code in knickknacks/numbers.py def round_half_away_from_zero ( number : float , decimals : int = 0 ) -> float : \"\"\" Rounds a float away from 0 if the fractional is 5 or more. Note: https://realpython.com/python-rounding Args: number: The number to round. decimals: The number of fractional decimal places to round to. Returns: The number after rounding. \"\"\" multiplier = 10 ** decimals return math . copysign ( math . floor ( abs ( number ) * multiplier + 0.5 ) / multiplier , number )","title":"numbers.py"},{"location":"api/numbers/#knickknacks.numbers","text":"Stuff to do with numbers.","title":"numbers"},{"location":"api/numbers/#knickknacks.numbers.clamp","text":"Clamps the given value between the given minimum and maximum values. Parameters: Name Type Description Default value float The value to restrict inside the range defined by minimum and maximum. required minimum float The minimum value to compare against. required maximum float The maximum value to compare against. required Returns: Type Description float The result between minimum and maximum. Source code in knickknacks/numbers.py def clamp ( value : float , minimum : float , maximum : float ) -> float : \"\"\" Clamps the given value between the given minimum and maximum values. Args: value: The value to restrict inside the range defined by minimum and maximum. minimum: The minimum value to compare against. maximum: The maximum value to compare against. Returns: The result between minimum and maximum. \"\"\" # Note the ignore to the linter. # The linter would have me use a combination of min and max functions inside each other. # Using a ternary operator is much more readable, and according to timeit, faster. return minimum if value < minimum else maximum if value > maximum else value # NOQA: FURB136","title":"clamp()"},{"location":"api/numbers/#knickknacks.numbers.float_to_fraction","text":"Converts a float to a fraction. Note https://stackoverflow.com/questions/23344185/how-to-convert-a-decimal-number-into-fraction Parameters: Name Type Description Default number float The number to convert. required Returns: Type Description str A string containing the number as a fraction. Source code in knickknacks/numbers.py def float_to_fraction ( number : float ) -> str : \"\"\" Converts a float to a fraction. Note: https://stackoverflow.com/questions/23344185/how-to-convert-a-decimal-number-into-fraction Args: number: The number to convert. Returns: A string containing the number as a fraction. \"\"\" return str ( fractions . Fraction ( number ) . limit_denominator ())","title":"float_to_fraction()"},{"location":"api/numbers/#knickknacks.numbers.round_half_away_from_zero","text":"Rounds a float away from 0 if the fractional is 5 or more. Note https://realpython.com/python-rounding Parameters: Name Type Description Default number float The number to round. required decimals int The number of fractional decimal places to round to. 0 Returns: Type Description float The number after rounding. Source code in knickknacks/numbers.py def round_half_away_from_zero ( number : float , decimals : int = 0 ) -> float : \"\"\" Rounds a float away from 0 if the fractional is 5 or more. Note: https://realpython.com/python-rounding Args: number: The number to round. decimals: The number of fractional decimal places to round to. Returns: The number after rounding. \"\"\" multiplier = 10 ** decimals return math . copysign ( math . floor ( abs ( number ) * multiplier + 0.5 ) / multiplier , number )","title":"round_half_away_from_zero()"},{"location":"api/platforms/","text":"Module knickknacks.platforms \u00b6 Stuff to do with platforms. Function get_directory_path ( * args ) \u00b6 Retrieves the path of the directory where the program is located. If frozen, path is based on the location of the executable. If not frozen, path is based on the location of the module which called this function. Parameters: Name Type Description Default *args str Positional arguments to be passed to Path.joinpath after the directory path. () Returns: Type Description str The path. Source code in knickknacks/platforms.py @cache def get_directory_path ( * args : str ) -> str : \"\"\" Retrieves the path of the directory where the program is located. If frozen, path is based on the location of the executable. If not frozen, path is based on the location of the module which called this function. Args: *args: Positional arguments to be passed to Path.joinpath after the directory path. Returns: The path. \"\"\" if is_frozen (): path = Path ( sys . executable ) . parent else : frame = get_function_field ( 1 ) path = Path ( inspect . getabsfile ( frame )) . parent return str ( path . joinpath ( * args ) . resolve ()) Function is_frozen () \u00b6 Determines whether the program is running from a frozen copy or from source. Returns: Type Description bool True if frozen, False otherwise. Source code in knickknacks/platforms.py @cache def is_frozen () -> bool : \"\"\" Determines whether the program is running from a frozen copy or from source. Returns: True if frozen, False otherwise. \"\"\" return bool ( getattr ( sys , \"frozen\" , False ) or hasattr ( sys , \"importers\" ) or _imp . is_frozen ( \"__main__\" )) Function touch ( name ) \u00b6 Touches a file. I.E. creates the file if it doesn't exist, or updates the modified time of the file if it does. Parameters: Name Type Description Default name str the file name to touch. required Source code in knickknacks/platforms.py def touch ( name : str ) -> None : \"\"\" Touches a file. I.E. creates the file if it doesn't exist, or updates the modified time of the file if it does. Args: name: the file name to touch. \"\"\" path : Path = Path ( name ) . resolve () path . touch ()","title":"platforms.py"},{"location":"api/platforms/#knickknacks.platforms","text":"Stuff to do with platforms.","title":"platforms"},{"location":"api/platforms/#knickknacks.platforms.get_directory_path","text":"Retrieves the path of the directory where the program is located. If frozen, path is based on the location of the executable. If not frozen, path is based on the location of the module which called this function. Parameters: Name Type Description Default *args str Positional arguments to be passed to Path.joinpath after the directory path. () Returns: Type Description str The path. Source code in knickknacks/platforms.py @cache def get_directory_path ( * args : str ) -> str : \"\"\" Retrieves the path of the directory where the program is located. If frozen, path is based on the location of the executable. If not frozen, path is based on the location of the module which called this function. Args: *args: Positional arguments to be passed to Path.joinpath after the directory path. Returns: The path. \"\"\" if is_frozen (): path = Path ( sys . executable ) . parent else : frame = get_function_field ( 1 ) path = Path ( inspect . getabsfile ( frame )) . parent return str ( path . joinpath ( * args ) . resolve ())","title":"get_directory_path()"},{"location":"api/platforms/#knickknacks.platforms.is_frozen","text":"Determines whether the program is running from a frozen copy or from source. Returns: Type Description bool True if frozen, False otherwise. Source code in knickknacks/platforms.py @cache def is_frozen () -> bool : \"\"\" Determines whether the program is running from a frozen copy or from source. Returns: True if frozen, False otherwise. \"\"\" return bool ( getattr ( sys , \"frozen\" , False ) or hasattr ( sys , \"importers\" ) or _imp . is_frozen ( \"__main__\" ))","title":"is_frozen()"},{"location":"api/platforms/#knickknacks.platforms.touch","text":"Touches a file. I.E. creates the file if it doesn't exist, or updates the modified time of the file if it does. Parameters: Name Type Description Default name str the file name to touch. required Source code in knickknacks/platforms.py def touch ( name : str ) -> None : \"\"\" Touches a file. I.E. creates the file if it doesn't exist, or updates the modified time of the file if it does. Args: name: the file name to touch. \"\"\" path : Path = Path ( name ) . resolve () path . touch ()","title":"touch()"},{"location":"api/strings/","text":"Module knickknacks.strings \u00b6 Stuff to do with strings. Function camel_case ( text , delimiter ) \u00b6 Converts text to camel case. Parameters: Name Type Description Default text str The text to be converted. required delimiter str The delimiter between words. required Returns: Type Description str The text in camel case. Source code in knickknacks/strings.py def camel_case ( text : str , delimiter : str ) -> str : \"\"\" Converts text to camel case. Args: text: The text to be converted. delimiter: The delimiter between words. Returns: The text in camel case. \"\"\" words = text . split ( delimiter ) return \"\" . join (( * map ( str . lower , words [: 1 ]), * map ( str . title , words [ 1 :]))) Function format_docstring ( function_or_string , width = 79 , prefix = None ) \u00b6 Formats a docstring for displaying. Parameters: Name Type Description Default function_or_string Union[str, Callable[..., Any]] The function containing the docstring, or the docstring its self. required width int The number of characters to word wrap each line to. 79 prefix Optional[str] One or more characters to use for indention. None Returns: Type Description str The formatted docstring. Source code in knickknacks/strings.py def format_docstring ( function_or_string : Union [ str , Callable [ ... , Any ]], width : int = 79 , prefix : Optional [ str ] = None ) -> str : \"\"\" Formats a docstring for displaying. Args: function_or_string: The function containing the docstring, or the docstring its self. width: The number of characters to word wrap each line to. prefix: One or more characters to use for indention. Returns: The formatted docstring. \"\"\" docstring = ( getattr ( function_or_string , \"__doc__\" , \"\" ) if callable ( function_or_string ) else function_or_string ) # Remove any empty lines from the beginning, while keeping indention. docstring = docstring . lstrip ( \" \\r\\n \" ) match = INDENT_REGEX . search ( docstring ) if match is not None and not match . group ( \"indent\" ): # The first line was not indented. # Prefix the first line with the white space from the subsequent, non-empty # line with the least amount of indention. # This is needed so that textwrap.dedent will work. docstring = min_indent ( \" \\n \" . join ( docstring . splitlines ()[ 1 :])) + docstring docstring = textwrap . dedent ( docstring ) # Remove common indention from lines. docstring = docstring . rstrip () # Remove trailing white space from the end of the docstring. # Word wrap long lines, while maintaining existing structure. wrapped_lines = [] indent_level = 0 last_indent = \"\" for line in docstring . splitlines (): match = INDENT_REGEX . search ( line ) if match is None : # pragma: no cover continue indent , text = match . groups () if len ( indent ) > len ( last_indent ): indent_level += 1 elif len ( indent ) < len ( last_indent ): indent_level -= 1 last_indent = indent line_prefix = prefix * indent_level if prefix else indent lines = textwrap . wrap ( text , width = width - len ( line_prefix ), break_long_words = False , break_on_hyphens = False ) wrapped_lines . append ( line_prefix + f \" \\n { line_prefix } \" . join ( lines )) # Indent docstring lines with the prefix. return textwrap . indent ( \" \\n \" . join ( wrapped_lines ), prefix = prefix or \"\" ) Function has_white_space ( text ) \u00b6 Determines if string contains white space. Parameters: Name Type Description Default text str The text to process. required Returns: Type Description bool True if found, False otherwise. Source code in knickknacks/strings.py def has_white_space ( text : str ) -> bool : \"\"\" Determines if string contains white space. Args: text: The text to process. Returns: True if found, False otherwise. \"\"\" return WHITE_SPACE_REGEX . search ( text ) is not None Function has_white_space_except_space ( text ) \u00b6 Determines if string contains white space other than space. Parameters: Name Type Description Default text str The text to process. required Returns: Type Description bool True if found, False otherwise. Source code in knickknacks/strings.py def has_white_space_except_space ( text : str ) -> bool : \"\"\" Determines if string contains white space other than space. Args: text: The text to process. Returns: True if found, False otherwise. \"\"\" return WHITE_SPACE_EXCEPT_SPACE_REGEX . search ( text ) is not None Function min_indent ( text ) \u00b6 Retrieves the indention characters from the line with the least indention. Parameters: Name Type Description Default text str the text to process. required Returns: Type Description str The indention characters of the line with the least amount of indention. Source code in knickknacks/strings.py def min_indent ( text : str ) -> str : \"\"\" Retrieves the indention characters from the line with the least indention. Args: text: the text to process. Returns: The indention characters of the line with the least amount of indention. \"\"\" lines = [] for line in text . splitlines (): if line . strip ( \" \\r\\n \" ): match = INDENT_REGEX . search ( line ) if match is not None : lines . append ( match . group ( \"indent\" )) return min ( lines , default = \"\" , key = len ) Function multi_replace ( data , replacements ) \u00b6 Performs multiple replacement operations on a string or bytes-like object. Parameters: Name Type Description Default data BytesOrStrType The text to perform the replacements on. required replacements Sequence[Sequence[BytesOrStrType]] A sequence of tuples, each containing the text to match and the replacement. required Returns: Type Description BytesOrStrType The text with all the replacements applied. Source code in knickknacks/strings.py def multi_replace ( data : BytesOrStrType , replacements : Sequence [ Sequence [ BytesOrStrType ]]) -> BytesOrStrType : \"\"\" Performs multiple replacement operations on a string or bytes-like object. Args: data: The text to perform the replacements on. replacements: A sequence of tuples, each containing the text to match and the replacement. Returns: The text with all the replacements applied. \"\"\" for old , new in replacements : data = data . replace ( old , new ) return data Function regex_fuzzy ( text ) \u00b6 Creates a regular expression matching all or part of a string or sequence. Parameters: Name Type Description Default text Union[str, Sequence[str]] The text to be converted. required Returns: Type Description str A regular expression string matching all or part of the text. Exceptions: Type Description TypeError If text is neither a string nor sequence of strings. Source code in knickknacks/strings.py def regex_fuzzy ( text : Union [ str , Sequence [ str ]]) -> str : \"\"\" Creates a regular expression matching all or part of a string or sequence. Args: text: The text to be converted. Returns: A regular expression string matching all or part of the text. Raises: TypeError: If text is neither a string nor sequence of strings. \"\"\" if not isinstance ( text , ( str , Sequence )): raise TypeError ( \"Text must be either a string or sequence of strings.\" ) if not text : return \"\" if isinstance ( text , str ): return \"(\" . join ( list ( text )) + \")?\" * ( len ( text ) - 1 ) return \"|\" . join ( \"(\" . join ( list ( item )) + \")?\" * ( len ( item ) - 1 ) for item in text ) Function remove_white_space ( text ) \u00b6 Removes all white space characters. Parameters: Name Type Description Default text str The text to process. required Returns: Type Description str The simplified version of the text. Source code in knickknacks/strings.py def remove_white_space ( text : str ) -> str : \"\"\" Removes all white space characters. Args: text: The text to process. Returns: The simplified version of the text. \"\"\" return WHITE_SPACE_REGEX . sub ( \"\" , text ) Function remove_white_space_except_space ( text ) \u00b6 Removes all white space characters except for space. Parameters: Name Type Description Default text str The text to process. required Returns: Type Description str The simplified version of the text. Source code in knickknacks/strings.py def remove_white_space_except_space ( text : str ) -> str : \"\"\" Removes all white space characters except for space. Args: text: The text to process. Returns: The simplified version of the text. \"\"\" return WHITE_SPACE_EXCEPT_SPACE_REGEX . sub ( \"\" , text ) Function simplified ( text ) \u00b6 Replaces one or more consecutive white space characters with a single space, and trims beginning and end. Parameters: Name Type Description Default text str The text to process. required Returns: Type Description str The simplified version of the text. Source code in knickknacks/strings.py def simplified ( text : str ) -> str : \"\"\" Replaces one or more consecutive white space characters with a single space, and trims beginning and end. Args: text: The text to process. Returns: The simplified version of the text. \"\"\" return WHITE_SPACE_REGEX . sub ( \" \" , text ) . strip () Function strip_ansi ( text ) \u00b6 Strips ANSI escape sequences from text. Parameters: Name Type Description Default text str The text to strip ANSI sequences from. required Returns: Type Description str The text with ANSI escape sequences stripped. Source code in knickknacks/strings.py def strip_ansi ( text : str ) -> str : \"\"\" Strips ANSI escape sequences from text. Args: text: The text to strip ANSI sequences from. Returns: The text with ANSI escape sequences stripped. \"\"\" return ANSI_COLOR_REGEX . sub ( \"\" , text )","title":"strings.py"},{"location":"api/strings/#knickknacks.strings","text":"Stuff to do with strings.","title":"strings"},{"location":"api/strings/#knickknacks.strings.camel_case","text":"Converts text to camel case. Parameters: Name Type Description Default text str The text to be converted. required delimiter str The delimiter between words. required Returns: Type Description str The text in camel case. Source code in knickknacks/strings.py def camel_case ( text : str , delimiter : str ) -> str : \"\"\" Converts text to camel case. Args: text: The text to be converted. delimiter: The delimiter between words. Returns: The text in camel case. \"\"\" words = text . split ( delimiter ) return \"\" . join (( * map ( str . lower , words [: 1 ]), * map ( str . title , words [ 1 :])))","title":"camel_case()"},{"location":"api/strings/#knickknacks.strings.format_docstring","text":"Formats a docstring for displaying. Parameters: Name Type Description Default function_or_string Union[str, Callable[..., Any]] The function containing the docstring, or the docstring its self. required width int The number of characters to word wrap each line to. 79 prefix Optional[str] One or more characters to use for indention. None Returns: Type Description str The formatted docstring. Source code in knickknacks/strings.py def format_docstring ( function_or_string : Union [ str , Callable [ ... , Any ]], width : int = 79 , prefix : Optional [ str ] = None ) -> str : \"\"\" Formats a docstring for displaying. Args: function_or_string: The function containing the docstring, or the docstring its self. width: The number of characters to word wrap each line to. prefix: One or more characters to use for indention. Returns: The formatted docstring. \"\"\" docstring = ( getattr ( function_or_string , \"__doc__\" , \"\" ) if callable ( function_or_string ) else function_or_string ) # Remove any empty lines from the beginning, while keeping indention. docstring = docstring . lstrip ( \" \\r\\n \" ) match = INDENT_REGEX . search ( docstring ) if match is not None and not match . group ( \"indent\" ): # The first line was not indented. # Prefix the first line with the white space from the subsequent, non-empty # line with the least amount of indention. # This is needed so that textwrap.dedent will work. docstring = min_indent ( \" \\n \" . join ( docstring . splitlines ()[ 1 :])) + docstring docstring = textwrap . dedent ( docstring ) # Remove common indention from lines. docstring = docstring . rstrip () # Remove trailing white space from the end of the docstring. # Word wrap long lines, while maintaining existing structure. wrapped_lines = [] indent_level = 0 last_indent = \"\" for line in docstring . splitlines (): match = INDENT_REGEX . search ( line ) if match is None : # pragma: no cover continue indent , text = match . groups () if len ( indent ) > len ( last_indent ): indent_level += 1 elif len ( indent ) < len ( last_indent ): indent_level -= 1 last_indent = indent line_prefix = prefix * indent_level if prefix else indent lines = textwrap . wrap ( text , width = width - len ( line_prefix ), break_long_words = False , break_on_hyphens = False ) wrapped_lines . append ( line_prefix + f \" \\n { line_prefix } \" . join ( lines )) # Indent docstring lines with the prefix. return textwrap . indent ( \" \\n \" . join ( wrapped_lines ), prefix = prefix or \"\" )","title":"format_docstring()"},{"location":"api/strings/#knickknacks.strings.has_white_space","text":"Determines if string contains white space. Parameters: Name Type Description Default text str The text to process. required Returns: Type Description bool True if found, False otherwise. Source code in knickknacks/strings.py def has_white_space ( text : str ) -> bool : \"\"\" Determines if string contains white space. Args: text: The text to process. Returns: True if found, False otherwise. \"\"\" return WHITE_SPACE_REGEX . search ( text ) is not None","title":"has_white_space()"},{"location":"api/strings/#knickknacks.strings.has_white_space_except_space","text":"Determines if string contains white space other than space. Parameters: Name Type Description Default text str The text to process. required Returns: Type Description bool True if found, False otherwise. Source code in knickknacks/strings.py def has_white_space_except_space ( text : str ) -> bool : \"\"\" Determines if string contains white space other than space. Args: text: The text to process. Returns: True if found, False otherwise. \"\"\" return WHITE_SPACE_EXCEPT_SPACE_REGEX . search ( text ) is not None","title":"has_white_space_except_space()"},{"location":"api/strings/#knickknacks.strings.min_indent","text":"Retrieves the indention characters from the line with the least indention. Parameters: Name Type Description Default text str the text to process. required Returns: Type Description str The indention characters of the line with the least amount of indention. Source code in knickknacks/strings.py def min_indent ( text : str ) -> str : \"\"\" Retrieves the indention characters from the line with the least indention. Args: text: the text to process. Returns: The indention characters of the line with the least amount of indention. \"\"\" lines = [] for line in text . splitlines (): if line . strip ( \" \\r\\n \" ): match = INDENT_REGEX . search ( line ) if match is not None : lines . append ( match . group ( \"indent\" )) return min ( lines , default = \"\" , key = len )","title":"min_indent()"},{"location":"api/strings/#knickknacks.strings.multi_replace","text":"Performs multiple replacement operations on a string or bytes-like object. Parameters: Name Type Description Default data BytesOrStrType The text to perform the replacements on. required replacements Sequence[Sequence[BytesOrStrType]] A sequence of tuples, each containing the text to match and the replacement. required Returns: Type Description BytesOrStrType The text with all the replacements applied. Source code in knickknacks/strings.py def multi_replace ( data : BytesOrStrType , replacements : Sequence [ Sequence [ BytesOrStrType ]]) -> BytesOrStrType : \"\"\" Performs multiple replacement operations on a string or bytes-like object. Args: data: The text to perform the replacements on. replacements: A sequence of tuples, each containing the text to match and the replacement. Returns: The text with all the replacements applied. \"\"\" for old , new in replacements : data = data . replace ( old , new ) return data","title":"multi_replace()"},{"location":"api/strings/#knickknacks.strings.regex_fuzzy","text":"Creates a regular expression matching all or part of a string or sequence. Parameters: Name Type Description Default text Union[str, Sequence[str]] The text to be converted. required Returns: Type Description str A regular expression string matching all or part of the text. Exceptions: Type Description TypeError If text is neither a string nor sequence of strings. Source code in knickknacks/strings.py def regex_fuzzy ( text : Union [ str , Sequence [ str ]]) -> str : \"\"\" Creates a regular expression matching all or part of a string or sequence. Args: text: The text to be converted. Returns: A regular expression string matching all or part of the text. Raises: TypeError: If text is neither a string nor sequence of strings. \"\"\" if not isinstance ( text , ( str , Sequence )): raise TypeError ( \"Text must be either a string or sequence of strings.\" ) if not text : return \"\" if isinstance ( text , str ): return \"(\" . join ( list ( text )) + \")?\" * ( len ( text ) - 1 ) return \"|\" . join ( \"(\" . join ( list ( item )) + \")?\" * ( len ( item ) - 1 ) for item in text )","title":"regex_fuzzy()"},{"location":"api/strings/#knickknacks.strings.remove_white_space","text":"Removes all white space characters. Parameters: Name Type Description Default text str The text to process. required Returns: Type Description str The simplified version of the text. Source code in knickknacks/strings.py def remove_white_space ( text : str ) -> str : \"\"\" Removes all white space characters. Args: text: The text to process. Returns: The simplified version of the text. \"\"\" return WHITE_SPACE_REGEX . sub ( \"\" , text )","title":"remove_white_space()"},{"location":"api/strings/#knickknacks.strings.remove_white_space_except_space","text":"Removes all white space characters except for space. Parameters: Name Type Description Default text str The text to process. required Returns: Type Description str The simplified version of the text. Source code in knickknacks/strings.py def remove_white_space_except_space ( text : str ) -> str : \"\"\" Removes all white space characters except for space. Args: text: The text to process. Returns: The simplified version of the text. \"\"\" return WHITE_SPACE_EXCEPT_SPACE_REGEX . sub ( \"\" , text )","title":"remove_white_space_except_space()"},{"location":"api/strings/#knickknacks.strings.simplified","text":"Replaces one or more consecutive white space characters with a single space, and trims beginning and end. Parameters: Name Type Description Default text str The text to process. required Returns: Type Description str The simplified version of the text. Source code in knickknacks/strings.py def simplified ( text : str ) -> str : \"\"\" Replaces one or more consecutive white space characters with a single space, and trims beginning and end. Args: text: The text to process. Returns: The simplified version of the text. \"\"\" return WHITE_SPACE_REGEX . sub ( \" \" , text ) . strip ()","title":"simplified()"},{"location":"api/strings/#knickknacks.strings.strip_ansi","text":"Strips ANSI escape sequences from text. Parameters: Name Type Description Default text str The text to strip ANSI sequences from. required Returns: Type Description str The text with ANSI escape sequences stripped. Source code in knickknacks/strings.py def strip_ansi ( text : str ) -> str : \"\"\" Strips ANSI escape sequences from text. Args: text: The text to strip ANSI sequences from. Returns: The text with ANSI escape sequences stripped. \"\"\" return ANSI_COLOR_REGEX . sub ( \"\" , text )","title":"strip_ansi()"},{"location":"api/testing/","text":"Module knickknacks.testing \u00b6 Stuff to do with testing. Class ContainerEmptyMixin \u00b6 A mixin class to be used in unit tests. Source code in knickknacks/testing.py class ContainerEmptyMixin : \"\"\"A mixin class to be used in unit tests.\"\"\" assertIsInstance : Callable [ ... , Any ] assertTrue : Callable [ ... , Any ] assertFalse : Callable [ ... , Any ] def assertContainerEmpty ( self , obj : Container [ Any ]) -> None : \"\"\" Asserts whether the given object is an empty container. Args: obj: The object to test. \"\"\" self . assertIsInstance ( obj , Container ) self . assertFalse ( obj ) def assertContainerNotEmpty ( self , obj : Container [ Any ]) -> None : \"\"\" Asserts whether the given object is a non-empty container. Args: obj: The object to test. \"\"\" self . assertIsInstance ( obj , Container ) self . assertTrue ( obj ) Method assertContainerEmpty ( self , obj ) \u00b6 Asserts whether the given object is an empty container. Parameters: Name Type Description Default obj Container[Any] The object to test. required Source code in knickknacks/testing.py def assertContainerEmpty ( self , obj : Container [ Any ]) -> None : \"\"\" Asserts whether the given object is an empty container. Args: obj: The object to test. \"\"\" self . assertIsInstance ( obj , Container ) self . assertFalse ( obj ) Method assertContainerNotEmpty ( self , obj ) \u00b6 Asserts whether the given object is a non-empty container. Parameters: Name Type Description Default obj Container[Any] The object to test. required Source code in knickknacks/testing.py def assertContainerNotEmpty ( self , obj : Container [ Any ]) -> None : \"\"\" Asserts whether the given object is a non-empty container. Args: obj: The object to test. \"\"\" self . assertIsInstance ( obj , Container ) self . assertTrue ( obj )","title":"testing.py"},{"location":"api/testing/#knickknacks.testing","text":"Stuff to do with testing.","title":"testing"},{"location":"api/testing/#knickknacks.testing.ContainerEmptyMixin","text":"A mixin class to be used in unit tests. Source code in knickknacks/testing.py class ContainerEmptyMixin : \"\"\"A mixin class to be used in unit tests.\"\"\" assertIsInstance : Callable [ ... , Any ] assertTrue : Callable [ ... , Any ] assertFalse : Callable [ ... , Any ] def assertContainerEmpty ( self , obj : Container [ Any ]) -> None : \"\"\" Asserts whether the given object is an empty container. Args: obj: The object to test. \"\"\" self . assertIsInstance ( obj , Container ) self . assertFalse ( obj ) def assertContainerNotEmpty ( self , obj : Container [ Any ]) -> None : \"\"\" Asserts whether the given object is a non-empty container. Args: obj: The object to test. \"\"\" self . assertIsInstance ( obj , Container ) self . assertTrue ( obj )","title":"ContainerEmptyMixin"},{"location":"api/testing/#knickknacks.testing.ContainerEmptyMixin.assertContainerEmpty","text":"Asserts whether the given object is an empty container. Parameters: Name Type Description Default obj Container[Any] The object to test. required Source code in knickknacks/testing.py def assertContainerEmpty ( self , obj : Container [ Any ]) -> None : \"\"\" Asserts whether the given object is an empty container. Args: obj: The object to test. \"\"\" self . assertIsInstance ( obj , Container ) self . assertFalse ( obj )","title":"assertContainerEmpty()"},{"location":"api/testing/#knickknacks.testing.ContainerEmptyMixin.assertContainerNotEmpty","text":"Asserts whether the given object is a non-empty container. Parameters: Name Type Description Default obj Container[Any] The object to test. required Source code in knickknacks/testing.py def assertContainerNotEmpty ( self , obj : Container [ Any ]) -> None : \"\"\" Asserts whether the given object is a non-empty container. Args: obj: The object to test. \"\"\" self . assertIsInstance ( obj , Container ) self . assertTrue ( obj )","title":"assertContainerNotEmpty()"},{"location":"api/utils/","text":"Module knickknacks.utils \u00b6 Misc utilities. Function get_function_field ( back = 0 ) \u00b6 Retrieves the stack field for the function which called this function. Parameters: Name Type Description Default back int The number of frames to go back. 0 Returns: Type Description FrameType The function stack field. Exceptions: Type Description AttributeError Unable to get reference to function. Source code in knickknacks/utils.py def get_function_field ( back : int = 0 ) -> FrameType : \"\"\" Retrieves the stack field for the function which called this function. Args: back: The number of frames to go back. Returns: The function stack field. Raises: AttributeError: Unable to get reference to function. \"\"\" counter = itertools . count () frame = inspect . currentframe () while frame is not None : # Note that this will always perform at least 1 loop. if next ( counter ) > back : return frame frame = frame . f_back raise AttributeError ( \"Unable to get reference to function.\" ) Function get_function_name ( back = 0 ) \u00b6 Retrieves the name of the function which called this function. Parameters: Name Type Description Default back int The number of frames to go back. 0 Returns: Type Description str The function name, or an empty string if not found. Source code in knickknacks/utils.py def get_function_name ( back : int = 0 ) -> str : \"\"\" Retrieves the name of the function which called this function. Args: back: The number of frames to go back. Returns: The function name, or an empty string if not found. \"\"\" try : return get_function_field ( back + 1 ) . f_code . co_name except AttributeError : return \"\" Function page ( lines ) \u00b6 Displays lines using the pager if necessary. Parameters: Name Type Description Default lines Sequence[str] The lines to be displayed. required Source code in knickknacks/utils.py def page ( lines : Sequence [ str ]) -> None : \"\"\" Displays lines using the pager if necessary. Args: lines: The lines to be displayed. \"\"\" # This is necessary in order for lines with embedded new line characters to be properly handled. lines = \" \\n \" . join ( lines ) . splitlines () width , _ = shutil . get_terminal_size () # Word wrapping to 1 less than the terminal width is necessary to prevent # occasional blank lines in the terminal output. text = \" \\n \" . join ( textwrap . fill ( line . strip (), width - 1 ) for line in lines ) pager ( text )","title":"utils.py"},{"location":"api/utils/#knickknacks.utils","text":"Misc utilities.","title":"utils"},{"location":"api/utils/#knickknacks.utils.get_function_field","text":"Retrieves the stack field for the function which called this function. Parameters: Name Type Description Default back int The number of frames to go back. 0 Returns: Type Description FrameType The function stack field. Exceptions: Type Description AttributeError Unable to get reference to function. Source code in knickknacks/utils.py def get_function_field ( back : int = 0 ) -> FrameType : \"\"\" Retrieves the stack field for the function which called this function. Args: back: The number of frames to go back. Returns: The function stack field. Raises: AttributeError: Unable to get reference to function. \"\"\" counter = itertools . count () frame = inspect . currentframe () while frame is not None : # Note that this will always perform at least 1 loop. if next ( counter ) > back : return frame frame = frame . f_back raise AttributeError ( \"Unable to get reference to function.\" )","title":"get_function_field()"},{"location":"api/utils/#knickknacks.utils.get_function_name","text":"Retrieves the name of the function which called this function. Parameters: Name Type Description Default back int The number of frames to go back. 0 Returns: Type Description str The function name, or an empty string if not found. Source code in knickknacks/utils.py def get_function_name ( back : int = 0 ) -> str : \"\"\" Retrieves the name of the function which called this function. Args: back: The number of frames to go back. Returns: The function name, or an empty string if not found. \"\"\" try : return get_function_field ( back + 1 ) . f_code . co_name except AttributeError : return \"\"","title":"get_function_name()"},{"location":"api/utils/#knickknacks.utils.page","text":"Displays lines using the pager if necessary. Parameters: Name Type Description Default lines Sequence[str] The lines to be displayed. required Source code in knickknacks/utils.py def page ( lines : Sequence [ str ]) -> None : \"\"\" Displays lines using the pager if necessary. Args: lines: The lines to be displayed. \"\"\" # This is necessary in order for lines with embedded new line characters to be properly handled. lines = \" \\n \" . join ( lines ) . splitlines () width , _ = shutil . get_terminal_size () # Word wrapping to 1 less than the terminal width is necessary to prevent # occasional blank lines in the terminal output. text = \" \\n \" . join ( textwrap . fill ( line . strip (), width - 1 ) for line in lines ) pager ( text )","title":"page()"}]}